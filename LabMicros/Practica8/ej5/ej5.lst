CCS PCM C Compiler, Version 4.140, 23125               19-Ene-17 01:27

               Filename:   F:\Semestre 20172\LaboratorioMicros\PracticasMicros\PracticaOcho\ej5\ej5.lst

               ROM used:   556 words (7%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           17 (5%) worst case
               Stack:     2 worst case (1 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   116
0003:  NOP
.................... #include <16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOPROTECT, 
.................... #use delay(clock=20000000) 
0102:  MOVLW  29
0103:  MOVWF  04
0104:  BCF    03.7
0105:  MOVF   00,W
0106:  BTFSC  03.2
0107:  GOTO   115
0108:  MOVLW  06
0109:  MOVWF  78
010A:  CLRF   77
010B:  DECFSZ 77,F
010C:  GOTO   10B
010D:  DECFSZ 78,F
010E:  GOTO   10A
010F:  MOVLW  7B
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
0113:  DECFSZ 00,F
0114:  GOTO   108
0115:  RETURN
.................... #use rs232(baud=38400, xmit=PIN_C6, rcv=PIN_C7) // (xmit=pinc_c6 ) = tx , (rcv=PIN_C7)= Rx 
.................... #org 0x1F00, 0x1FFF void loader16F877(void) {} //for the 8k 16F876/7 
*
1F00:  RETURN
.................... char opcion; 
.................... int i=0; 
.................... void main(){ 
*
0116:  CLRF   04
0117:  BCF    03.7
0118:  MOVLW  1F
0119:  ANDWF  03,F
011A:  MOVLW  20
011B:  BSF    03.5
011C:  MOVWF  19
011D:  MOVLW  A6
011E:  MOVWF  18
011F:  MOVLW  90
0120:  BCF    03.5
0121:  MOVWF  18
0122:  CLRF   21
0123:  BSF    03.5
0124:  BSF    1F.0
0125:  BSF    1F.1
0126:  BSF    1F.2
0127:  BCF    1F.3
.................... while(1){ 
.................... printf("Indica la opciòn: \n"); 
0128:  MOVLW  04
0129:  BCF    03.5
012A:  BSF    03.6
012B:  MOVWF  0D
012C:  MOVLW  00
012D:  MOVWF  0F
012E:  BCF    03.6
012F:  GOTO   08D
.................... printf("0.-Apaga los leds\n"); 
0130:  MOVLW  18
0131:  BSF    03.6
0132:  MOVWF  0D
0133:  MOVLW  00
0134:  MOVWF  0F
0135:  BCF    03.6
0136:  CALL   0B5
.................... printf("1.-Prende los leds\n"); 
0137:  MOVLW  22
0138:  BSF    03.6
0139:  MOVWF  0D
013A:  MOVLW  00
013B:  MOVWF  0F
013C:  BCF    03.6
013D:  CALL   0B5
.................... printf("2.-Corrimiento a la derecha\n"); 
013E:  MOVLW  2C
013F:  BSF    03.6
0140:  MOVWF  0D
0141:  MOVLW  00
0142:  MOVWF  0F
0143:  BCF    03.6
0144:  CALL   0B5
.................... printf("3.-Corrimiento a la izquierda\n"); 
0145:  MOVLW  3B
0146:  BSF    03.6
0147:  MOVWF  0D
0148:  MOVLW  00
0149:  MOVWF  0F
014A:  BCF    03.6
014B:  CALL   0B5
.................... printf("4.-Corrimiento hacia ambos lados\n"); 
014C:  MOVLW  4B
014D:  BSF    03.6
014E:  MOVWF  0D
014F:  MOVLW  00
0150:  MOVWF  0F
0151:  BCF    03.6
0152:  CALL   0B5
.................... printf("5.-Prende y apaga todos los leds"); 
0153:  MOVLW  5C
0154:  BSF    03.6
0155:  MOVWF  0D
0156:  MOVLW  00
0157:  MOVWF  0F
0158:  BCF    03.6
0159:  CALL   0B5
.................... printf("salir"); 
015A:  MOVLW  6D
015B:  BSF    03.6
015C:  MOVWF  0D
015D:  MOVLW  00
015E:  MOVWF  0F
015F:  BCF    03.6
0160:  CALL   0B5
.................... opcion=getch(); 
0161:  BTFSS  0C.5
0162:  GOTO   161
0163:  MOVF   1A,W
0164:  MOVWF  20
.................... putc(opcion); 
0165:  MOVF   20,W
0166:  BTFSS  0C.4
0167:  GOTO   166
0168:  MOVWF  19
.................... switch(opcion){ 
0169:  MOVF   20,W
016A:  XORLW  30
016B:  BTFSC  03.2
016C:  GOTO   17D
016D:  XORLW  01
016E:  BTFSC  03.2
016F:  GOTO   182
0170:  XORLW  03
0171:  BTFSC  03.2
0172:  GOTO   188
0173:  XORLW  01
0174:  BTFSC  03.2
0175:  GOTO   1A4
0176:  XORLW  07
0177:  BTFSC  03.2
0178:  GOTO   1BC
0179:  XORLW  01
017A:  BTFSC  03.2
017B:  GOTO   1FB
017C:  GOTO   228
....................    case '0': 
....................       output_b(0x00); //En ensamblador hubieramos mandado 0 al puerto B 
017D:  BSF    03.5
017E:  CLRF   06
017F:  BCF    03.5
0180:  CLRF   06
....................       break; 
0181:  GOTO   228
....................    case '1': 
....................       output_b(0xFF); //En ensamblador hubieramos mandado 0 al puerto B 
0182:  BSF    03.5
0183:  CLRF   06
0184:  MOVLW  FF
0185:  BCF    03.5
0186:  MOVWF  06
....................       break; 
0187:  GOTO   228
....................    case '2': 
....................       int valor =128; 
....................       int aux=0; 
0188:  MOVLW  80
0189:  MOVWF  22
018A:  CLRF   23
....................       while(valor>0){ 
018B:  MOVF   22,F
018C:  BTFSC  03.2
018D:  GOTO   1A3
....................          output_b(valor); 
018E:  BSF    03.5
018F:  CLRF   06
0190:  BCF    03.5
0191:  MOVF   22,W
0192:  MOVWF  06
....................          delay_ms(1000); //Enn ensamblador se debiò crear una rutina con el tiempo de cada instrucciòn 
0193:  MOVLW  04
0194:  MOVWF  28
0195:  MOVLW  FA
0196:  MOVWF  29
0197:  CALL   102
0198:  DECFSZ 28,F
0199:  GOTO   195
....................          aux=valor/2; 
019A:  BCF    03.0
019B:  RRF    22,W
019C:  MOVWF  23
....................          valor=valor-aux; 
019D:  MOVF   23,W
019E:  SUBWF  22,F
....................          if(valor<1) 
019F:  MOVF   22,F
01A0:  BTFSC  03.2
....................             break; 
01A1:  GOTO   1A3
....................       } 
01A2:  GOTO   18B
....................        
....................  
....................       break;  
01A3:  GOTO   228
....................    case '3': 
....................          int valor2 =1; 
....................       int aux2=0; 
01A4:  MOVLW  01
01A5:  MOVWF  24
01A6:  CLRF   25
....................       while(valor2<=128){ 
01A7:  MOVF   24,W
01A8:  SUBLW  80
01A9:  BTFSS  03.0
01AA:  GOTO   1BB
....................          output_b(valor2); 
01AB:  BSF    03.5
01AC:  CLRF   06
01AD:  BCF    03.5
01AE:  MOVF   24,W
01AF:  MOVWF  06
....................          delay_ms(1000); //Enn ensamblador se debiò crear una rutina con el tiempo de cada instrucciòn 
01B0:  MOVLW  04
01B1:  MOVWF  28
01B2:  MOVLW  FA
01B3:  MOVWF  29
01B4:  CALL   102
01B5:  DECFSZ 28,F
01B6:  GOTO   1B2
....................          aux2=valor2*2; 
01B7:  BCF    03.0
01B8:  RLF    24,W
01B9:  MOVWF  25
....................          valor2=valor2; 
....................       } 
01BA:  GOTO   1A7
....................        
....................    break; 
01BB:  GOTO   228
....................    case '4': 
....................    int var2; 
....................             var2=0x80; 
01BC:  MOVLW  80
01BD:  MOVWF  26
....................             output_b(var2); 
01BE:  BSF    03.5
01BF:  CLRF   06
01C0:  BCF    03.5
01C1:  MOVF   26,W
01C2:  MOVWF  06
....................             delay_ms(1000); 
01C3:  MOVLW  04
01C4:  MOVWF  28
01C5:  MOVLW  FA
01C6:  MOVWF  29
01C7:  CALL   102
01C8:  DECFSZ 28,F
01C9:  GOTO   1C5
....................            
....................   
....................             do{ 
....................                 var2=var2/2; 
01CA:  BCF    03.0
01CB:  RRF    26,F
....................                 output_b(var2);  
01CC:  BSF    03.5
01CD:  CLRF   06
01CE:  BCF    03.5
01CF:  MOVF   26,W
01D0:  MOVWF  06
....................                 delay_ms(1000); 
01D1:  MOVLW  04
01D2:  MOVWF  28
01D3:  MOVLW  FA
01D4:  MOVWF  29
01D5:  CALL   102
01D6:  DECFSZ 28,F
01D7:  GOTO   1D3
....................             }while (var2!=1); 
01D8:  DECFSZ 26,W
01D9:  GOTO   1CA
....................          
....................             var2=0x01; 
01DA:  MOVLW  01
01DB:  MOVWF  26
....................             output_b(var2); 
01DC:  BSF    03.5
01DD:  CLRF   06
01DE:  BCF    03.5
01DF:  MOVF   26,W
01E0:  MOVWF  06
....................             delay_ms(1000); 
01E1:  MOVLW  04
01E2:  MOVWF  28
01E3:  MOVLW  FA
01E4:  MOVWF  29
01E5:  CALL   102
01E6:  DECFSZ 28,F
01E7:  GOTO   1E3
....................             do{ 
....................                 var2+=var2; 
01E8:  MOVF   26,W
01E9:  ADDWF  26,F
....................                 output_b(var2);  
01EA:  BSF    03.5
01EB:  CLRF   06
01EC:  BCF    03.5
01ED:  MOVF   26,W
01EE:  MOVWF  06
....................                 delay_ms(1000); 
01EF:  MOVLW  04
01F0:  MOVWF  28
01F1:  MOVLW  FA
01F2:  MOVWF  29
01F3:  CALL   102
01F4:  DECFSZ 28,F
01F5:  GOTO   1F1
....................             }while (var2!=0x80);   
01F6:  MOVF   26,W
01F7:  SUBLW  80
01F8:  BTFSS  03.2
01F9:  GOTO   1E8
....................              
....................    break; 
01FA:  GOTO   228
....................    case '5': 
....................       int conta=0; 
01FB:  CLRF   27
....................       while(conta<5){ 
01FC:  MOVF   27,W
01FD:  SUBLW  04
01FE:  BTFSS  03.0
01FF:  GOTO   227
....................       output_b(0xff); //poner unos en todos los bits del puerto b 
0200:  BSF    03.5
0201:  CLRF   06
0202:  MOVLW  FF
0203:  BCF    03.5
0204:  MOVWF  06
....................       printf(" Todos los bits encendidos \n\r"); //impresion de pantalla 
0205:  MOVLW  70
0206:  BSF    03.6
0207:  MOVWF  0D
0208:  MOVLW  00
0209:  MOVWF  0F
020A:  BCF    03.6
020B:  CALL   0B5
....................       delay_ms(1000); // retardo fe un segundo 
020C:  MOVLW  04
020D:  MOVWF  28
020E:  MOVLW  FA
020F:  MOVWF  29
0210:  CALL   102
0211:  DECFSZ 28,F
0212:  GOTO   20E
....................       output_b(0x00);//poner ceros en todos los bits del puerto b 
0213:  BSF    03.5
0214:  CLRF   06
0215:  BCF    03.5
0216:  CLRF   06
....................       printf(" Todos los leds apagados \n\r"); // impresion de pantalla 
0217:  MOVLW  7F
0218:  BSF    03.6
0219:  MOVWF  0D
021A:  MOVLW  00
021B:  MOVWF  0F
021C:  BCF    03.6
021D:  CALL   0B5
....................       delay_ms(1000); // retardo de un segundo 
021E:  MOVLW  04
021F:  MOVWF  28
0220:  MOVLW  FA
0221:  MOVWF  29
0222:  CALL   102
0223:  DECFSZ 28,F
0224:  GOTO   220
....................       conta++; 
0225:  INCF   27,F
....................       }//while 
0226:  GOTO   1FC
....................  
....................       break; 
0227:  GOTO   228
....................       default: 
....................       break; 
....................        
....................  
.................... } 
....................  
.................... } 
0228:  BSF    03.5
0229:  GOTO   128
.................... }//main 
022A:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
